import java.util.Random;

//Simulation of a minion, who has many special abilities and is a type of monster.
public class Minion extends Character implements Monster {
  public Minion(String name) {
    super(name, 5, 5, 5, 5);
  }

  /**
   * The special ability that the minion will use to attack will be randomly generated by the method.
   */
  @Override
  public void strike(Character character) {
    Random random = new Random();
    int randomNumber = random.nextInt(100);
    if (randomNumber < 10) {
      ArrayIndexOutOfBoundException(character);
    } else if (randomNumber < 25) {
      NullPointerException();
    } else {
      SyntaxError(character);
    }
    this.increaseEP(3);
  }

  /**
   * The syntax error ability decreases the HP of the enemy and if he/she dies, the EP of the minion is increased.
   * The EP of the enemy are increased as well and if the enemy is student, he/she gains 3 more KP.
   */
  @Override
  public void SyntaxError(Character enemy) {
    enemy.decreaseHP(100 * this.getAttack() / (100 + enemy.getDefence()));
    if (enemy.getHP() == 0) {
      this.increaseEP(4);
    }
    enemy.increaseEP(3);
    if (enemy instanceof Student) {
      ((Student) enemy).increaseKP(3);
    }
  }

  /**
   * The HP of the minion are increased by the amount of his/her defence.
   */
  @Override
  public void NullPointerException() {
    this.increaseHP(this.getDefence());
  }


  /**
   * Using this ability, the minion decreases the HP of the enemy two times more than the syntax error one does.
   * If the enemy dies, the EP of the minion is increased.
   * The EP of the enemy are increased as well and if the enemy is student, he/she gains 3 more KP.
   */
  @Override
  public void ArrayIndexOutOfBoundException(Character enemy) {
    enemy.decreaseHP(2 * (100 * this.getAttack() / (100 + enemy.getDefence())));
    if (enemy.getHP() == 0) {
      this.increaseEP(4);
    }
    enemy.increaseEP(3);
    if (enemy instanceof Student) {
      ((Student) enemy).increaseKP(3);
    }
  }

  @Override
  public void NoneTermination() {

  }

  @Override
  public void ConcurrentModificationException(Team team) {

  }
}
